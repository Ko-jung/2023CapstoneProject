4장: 게임 서버와 클라이언트
서버와 클라의 상호작용은 크게 네 가지로 나뉨
연결, 요청-응답, 능동적 통보, 연결 해제

서버가 하는 일
여러 사용자와 상호작용, 클라이언트에서 해킹 당하면 안되는 처리, 플레이어의 상태 보관

게임 서버의 품질
안정성: 게임서버가 얼마나 죽지 않는가, 게임서버가 얼마나 오작동을 하지 않는가
    안정성을 위해
     치밀한 개발과 유닛 테스트: 코드 한 줄 한 줄 꼼꼼히 검수하고 엄격하게 규정된 코딩 가이드라인 따르기
      80:20 법칙: 모든 프로그램 성능의 80%는 20% 코드에서 나온다, 성능을 최적화 나머지는 유지 보수하기 쉬운 단순한 구조로
      1인 이상의 코드리뷰: 모든 개발 결과물을 동료의 검토를 받는 것
      가정하지 말고 검증하라: 유닛 테스트로만 서버의 안정성을 확신 할 수 없다. 봇 테스트 혹은 더미 클라이언트 테스트로 확인해보자

서버가 불안정 해지면:
서버가 죽더라도 최대한 빨리 다시 살아나게
서버는 죽더라도 최대한 적은(min) 서비스만 죽게
서버 오작동에 대해서 로그를 남길 수 있게

확장성: 서버를 얼마나 많이 설치할 수 있느냐 + 플레이어 입장에선 사용자 수가 늘어나더라도 서비스 품질이 떨어지지 않고 유지되느냐
    수직적 확장(하드웨어 좋은걸로)과 수평적 확장(서버 개수를 많이)으로 나뉨 (장단점 그림)

 성능: 얼마나 빨리 처리하는 지
    올리는 방법: 서버의 단위 처리 속도 높이기: 로직 처리를 클라에 분산
                         서버의 과부하 영역을 분산(코드 프로파일링): NPC의 길찾기 담당 서버를 여러대 두어 부하를 분산
                         네트워크 프로토콜 최적화: 1. 메세지 양 줄이기 (압축도 가능) 양자화(정수 혹으 부동소수점 값의 정밀도를 낮추는 대신 차지하는 데이터 크기를 줄이는 방법), 2. 메시지 교환 횟수 줄이기(ABCD를 주고받을떄 AC를 먼저 보내고 BD를 받는)
                         지리적으로 가까운 플레이어끼리 플레이하게 유도
                         서버를 거치지않고 p2p 방식으로(FPS게임에서 자주 사용되는 기법)

 관리 편의성: 일반적으로 게임 서버는 콘솔로 상호작용이 없다. 서버 프로그램을 원격으로 관리하는 프로그램을 따로 이용한다. 그러면 서버 켜키/끄기, 동시접속자 수 보기. Cpu,Ram 사용량 보기 등이 가능해진다.


5장: 게임 네트워킹
게임플레이 네트워킹
모든 역할을 서버에서 하기 (렌더링까지): 지금은 쓰지않음
렌더링은 클라이언트에서 하기: 메세지를 주고 받으며 서버 동기화함(캐릭이 움직였다. 나타났다/사라졌다, 슈류탄을 어떤 좌표로 던졌다)
    이 방식은 레이턴시가 1/60보다 현저히 낮아야하고 레이턴시가 항상 균일해야함. LAN이 아니고서 쉽지않음
    해결방법은 클라로 알리는 월드 변화를 1/30이나 1/10으로 낮추고 바뀐 변화값을 보간하여 이동하게 하는 방식을 씀
    이렇게하면 자연스러워 보이지만 서버와 클라의 위치가 정확히 일치하지 않음
추측항법: 저쪽 캐릭터의 위치 정보를 이미 지난 약간의 시간만큼 예측함
    이를 위해선 두 기기 간 레이턴시를 알아야함. 라운드 트립 레이턴시를 측정함 (A->B, B->A 하여 걸린 시간의 /2)
    캐릭터 정보를 보낼때 이동방향까지 같이 보낸다. 그렇게하면 (받은 위치) + (레이턴시) * (방향벡터)로 현재 위치가 어딘지 추측할 수 있다.
    또한 점프같은 이동방향이 달라질때 나타나는 약간의 워프를 방지하기 위해 선형보간 또는 스플라인 보간으로 자연스럽게 보이는 방식이 있음.
레이턴시 마스킹: 위를 그대로 사용하면 입력이 즉시 처리되지 않음. 해결 방법 중 하나는 '사소한 것들은 클라이언트에서 판단하기'임
        플레이어 자신이 조종하는 플레이어 캐릭터의 위치 계산은 클라이언트에서 판단하고 클라이언트는 판단 결과를 서버에 보내 줌
        쾌적하지만 해킹 문제가 있다. 해결 방법으로 서버는 이동 정보가 정상적인 값 범위에 있는지 검사하거나, 클라와 서버 양쪽 모두가 이동 처리를 하는 방식(클라에서 일단 이동, 후 서버에서 재조정)이 있다.
    또 다른 방법으론 '일단 보여주고 나중에 얼렁뚱땅하기'
        클라에서 행동을 하면 서버에 메세지를 보내면서 그 행동에 맞는 일부 모습을 클라에서 시작함
        서버에서 행동 명령을 받아 처리 후 플레이어 캐릭터에게 가해야하는 행동을 클라에 보냄
        클라에서 메세지를 받으면 연출해야하는 나머지 부분을 클라에서 보여줌
        (디아블로3에서 레이턴시가 높을 떄, 공격 모션 후 뒤 이펙트가 날라오는 것을 볼 수 있다)
        (스타에서도 이동 명령 후 음성만 먼저 출력되고 이동이 늦게 되는 것을 볼 수 있다.)
장르별 특이사항
    MMORPG: 플레이어의 가시 영역에 있는 것들의 정보만 서버에서 보내줘도 됨. 따라서 플레이어 각각에 대해서 각 플레이어가 볼 수 있는 캐릭터 목록, 캐릭터 각각에 대해서 자기 자신을 볼 수 있는 플레이어 목록을 서버에서 알아야함
    실시간 전략 시뮬: 플레이어는 적지만 캐릭터 수가 많기에 통신량이 많음. 이를 해결하기 위해 락스텝 동기화 알고리즘을 씀.
        1. 각 플레이어는 다른 플레이어들에게 입력 명령을 보냄
        2. 플레이어의 입력 명령에 따라 모든 클라이언트가 동시에 씬 업데이트를 함
    이를 통해
        1. 각 클라는 입력 명령만 주고 받으며 캐릭터의 이동상태를 주고받지 않음
        2. 입력 명령은 통신량이 상대적으로 매우 적음
    게임월드는 클라끼리 항상 100% 같은 상태를 유지함. 클라끼리 (현재 시간, 가한 명령, 체크섬(해킹을 대비하여 게임 월드상황 체크)) 메세지를 보냄.
    하지만 이 방식은 레이턴시가 거의 없을 때 완벽하기 작동되므로 약간 수정하여 '언제 실행해야 하는지에 대한 미래 시간'을 같이 보냄.
        미래시간은 현재시간 + 왕복 레이턴시/2 + 임의의 설정값
        이때 미래시간은 너무 멀어도 가까워도 안됨.
        미래시간을 이용하여 레이턴시 마스킹을 함. (입력처리를 즉시 못해도 연출만 보여주고 이후 미래시간에 도달하면 실제로 캐릭터가 움직이게 함)
    이때 락스텝 동기화 알고리즘의 단점은
        1. 다른 플레이어가 진행중인 게임에 들어오게 만들기 까다로움
        2. 물리 엔진 등 게임플레이에 관여하는 연산에 부동 소수점을 쓸 수 없음. 클라마다 부동 소수점 값이 미세하게 달라 나중에 나비효과가 될 수 있음. 최악의 경우 물리 엔진을 고정 소수점으로 다시 만들어야 할 수도
        3. 플레이어 수가 많아지기 어려움. 가시 필터링 사용도 힘듦
        4. 씬 업데이트가 일시 정지할 확률이 높음. 레이턴시가 제일 높은 사람 기준으로 미래 시간이 정해지기 때문
        5. 입력 명령의 속도에 민감한 게임에 부적합. 캐릭터에게 넣은 행동은 미래시간이 되어야 움직이기 때문
레이턴시 줄이기
    UDP 사용. 같은 양의 데이터를 보내도 적은 수의 패킷 (뭉치는 시간은 10밀리초 이하가 적당), C/S 네트워킹 또는 P2P 네트워킹 사용(또는 혼용, 중요한 연산은 C/S, 이동 채팅은 P2P)


6장: 게임 네트워크 엔진 프라우넷
소켓 API는 한계가 많다. OS 종속적이므로 다른 OS에서 운영하려면 다른 방식도 생각해야 한다. 소켓에 없는 기능도 구현해야 한다.
유니티 언리얼에선 RakNet이라는 게임 서버 엔진을 쓰지만 개인이나 인디 개발 대상으로 무료인 프라우드넷을 알려준다. (참고로 락넷도 오픈소스로 전환이 되었다고 한다.)

여기서 알고있으면 좋을거같은 개념을 나열하자면,
RMI(원격 함수 호출)
    상대방 컴퓨터 안에 있는 프로그램의 특정 함수를 멀리서 실행
    장1: 송신과 수신이 처리하는 코드를 손으로 일일이 구현할 필요가 없다.
    장2: 송수신 메세지의 형태가 변경되었을 때 코드를 수정하다가 실수할 위험이 없다.
P2P 그룹
    P2P 연결을 맺거나 끊는 것을 클라이언트가 결정한다면 해킹된 클라가 다른 아무 클라에 P2P 연결을 맺고 잘못된 데이터를 전송할 수 있음.
    그렇기에 서버측에서 P2P 그룹을 만들어 포함된 클라끼리 P2P 통신을 함
    그룹에 포함된 클라에 멀티캐스트 방식으로 메세지를 보냄
홀펀치
    NAT기기로 인해 public IP와 Port를 몰라 P2P 통신이 어렵다. (NAT(공유기)는 NAT에 연결된 기기에 임의의 로컬 IP를 부여하기 떄문이다. 이 IP는 로컬에서만 인식이 가능하다)
    이를 해결하기위해 NAT에 통로를 뚫는다고 생각하면 된다.
    중개서버를 통해 서로의 NAT 테이블을 이용하여 통신한다.

7장: 데이터 베이스 기초, 8장 NoSQL기초 는 데이터베이스 영역이라 빠르고 가볍게 읽음

9장: 분산 서버 구조
서버 분산
스케일 업 = 수직 확장, 스케일 아웃 = 수평 확장
처음부터 분산 게임 서버 개발 하는것이 아닌 단일 게임 서버 구조에서 분산 처리를 해야하는 지점만 엄선하여 추가 개발하는 방식을 많이 사용함
    이유: 1. 디버깅이 까다로움, 2. OS가 해야할 일을 불필요하게 증가시킴, 3. 클라우드 서버 환경에선 클라우드 서버 인스턴스 간에 통신회선의 신뢰성도 문제가 될 수 있음.
분산은 데이터 단위 분산과 기능 단위 분산으로 나뉨
    데이터 단위 분산
        은 예를 들어 시계를 만드는 가게가 있을 때, 기술자 혼자가 조립, 도색, 포장하던걸 직원을 늘리거나 공장을 더 늘리는 방식
        각 서버는 모드 같은 종류의 일을 함
    기능적 분산
      은 시계 제작의 각 단계를 서로 다른 사람이 수행하는 것
    물론 둘을 혼용할 수 있음
또한 게임 로직의 분산 처리 방식은 동기 분산 처리, 비동기 분산 처리, 데이터 복제 및 로컬 처리
    들어가기전, 어떤 로직이 있으면 되도록 분산 처리를 할 일이 없게 하는것이 가장 좋음
        분산 서버에 메세지를 보낼 때 우리는 send() 한 번 부르면 되지만 OS측에선 많은 일을 함.
        그렇기에 배꼽이 더 커지며 비효율적인 상황이 발생함.
    동기 분산 처리:  어떤 연산을 다른 서버에 던져 놓고 그 결과가 올 떄 까지 대기
        대기할 뿐만 아니라 데이터가 도중에 변경되지 않게 lock을 해야 함
        캐릭터와 몬스터 분산을 따로한다 했을 때, 캐릭터가 몬스터를 때렸을 때, 몬스터 서버에 "공격을 가했다"란 메세지를 주고 받으면 '동기식 명령 처리법'
        몬스터 서버에서 몬스터의 정보를 받아와 업데이트하는 방식. 일관성을 지키면서 다른 서버에 있는 데이터에 엑세스하면 '동기식 데이터 변경법' 이라고 책에선 정의함. 이땐 분산 락 기법을 동반함.
    비동기 분산 처리: 연산 명령을 다른 서버에 송신 후 결과를 기다리지 않고 할 일을 함
        MPI(Message Passing Interface)나 액터 모델이라고 불림
        동기 분산 처리와 달리 잠금으로 인한 병목이 없다. 서버의 성능을 최대한으로 활용 가능.
        하지만 모든 로직을 이 방식으로 구현 할 수 없다.
        플레이어 몬스터 분산처리 예시로 플레이어 서버는 몬스터 서버에 '몬스터에 데미지를 주었다'를 통보하고 반대론 '플레이어에게 아이템을 주었다'같이 통보함
    데이터 복제에 기반을 둔 로직처리: 서버에 다른 서버가 관리하는 정보를 복제하여 소유
        그리고 각자 로직처리 중 자신이 소유한 데이터에 변경이 되었다면 변경되었다는 사실을 상대방에게 알려줌.
        그걸 받은 서버는 그거에 맞게 정보를 변경함.
        분산처리 하기 전 코드와 비슷하거나 동일함
        단점으론 사본 데이터가 원본 데이터와 간발의 차이로 생기는 스테일 데이터 문제가 생길 수 있음. 이때 데이터 불일치로 잘못된 연산이 발생되는데 이를 하이젠 버그라고 함.
응집도: 특정 영역 안에 얼마나 많은 데이터가 관련되고 뭉쳐 있는지 의미함. 분산 처리가 가장 적게 일어날 수록 응집도가 높다고 함.
    ex) 상호작용이 일어날일 없는 다른 대륙끼리는 분산처리 해도된다. 매치메이킹은 실력이 비슷한 사람을 모아주므로 실력에따른 서버를 둔다.
이렇게 세가지 분산 처리 방식이 있지만 각각의 단점으로 어떠한 방식도 쓰기 어렵다면, 기능적 혹은 수직 분산 처리다. ex) 경매장
    기능적 분산 처리는 분산 처리를 할 수 있는 범위가 제한되어있다. 기능을 쪼갠 만큼만 가능하기 때문.
    또한 수평 분산 처리보다 분산 효율석이 떨어진다. 
    그러니 기능적 분산 처리는 최후 수단이다. 채팅과 전투 서버를 분리하면 채팅이 죽으면 그냥 게임하면되고 전투가 죽으면 채팅이라도 칠 수 있게 해준다.
요약
    성능 분석으로 분산 처리가 필요한 지점 엄선
    데이터 응집력 확인. 다룰 데이터 간 상호 작용이 매우 적은 것들만 분산
    분산 처리 방식은 동기, 비동기, 데이터 동기화에 기반을 둔 로컬 처리 방식을 택하자
    어쩃건 가능하면 쓰지말자
그나마 장점
    확장성과 안정성 효과를 줌. (서버 5대중 한 대가 다운되면 20%만 튕기고 다시 다른 서버로 로그인 가능)
    기능적 분산도 NPC서버가 다운되도 전투 서버가 살아있으므로 노상관
이렇게 분산처리 유형은 2X3 조합임
고가용성: 사용자가 항상 서비스를 이용할 수 있게 하는 것
    서버 한 대가 아닌 여러 대를 두어 서버가 죽지 않는것처럼 보이게함
    이처럼 필요 이상의 서버를 두는 것을 이중화 혹은 다중화라고 함
    고가용성을 위한 서버 구성 패턴으론 액티브-패시브, 액티브-액티브 패턴이 있음
        액티브-패시브 패턴
            액티브 서버가 살아 있을 때, 모든 서버 요청은 액티브 서버가 받고 패시브 서버는 액티브의 복제를 받음. 그러다가 액티브가 죽으면 패시브가 액티브 서버로 승격 하는 방식
            서버 하나가 계속 논다. 이는 자원낭비다.
        액티브-액티브 패턴
            액티브 서버 둘이 클라 요청을 분담하여 처리하고 필요할 때 각자 가진 데이터를 서로 보냄. 그러다 하나가 죽으면 살아있는 나머지로 요청이 몰림
            하지만 동시에 각 두 서버에 같은 데이터를 요구하면 서로의 같은 데이터가 최신 정보인지 알 수 없음. 이를 스테일 문제라고 함. 그렇기에 개발이 까다롭거나 설계 자체가 안될 수 도 있음
            이를 해결하는 것이 두 서버 사이에 메모리 저장소 역할을 하는 서버를 두는것임
            공유 메모리 서버에 쓰고 읽는 방식으로 데이터를 액세스함. 하지만 메모리 저장소가 죽으면 해결 할 수 없음. 해결하려면 메모리 저장소도 고가용성을 위해 하나더 둬야함
    데이터베이스도 고가용성을 위해 액티브-패시브를 씀. 또한 여러 테이블을 다른 데이터베이스 서버 기기에 분배하는데 이를 수직 파티셔닝이라고 함



















