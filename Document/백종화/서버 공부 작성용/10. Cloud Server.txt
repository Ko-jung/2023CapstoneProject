요즘은 초거대 클라우드 호스팅 업체(아마존, MS 등)가 풍부하게 제공하므로 옛날처럼 서버 구축하는데에 큰 도박을 하지 않아도 된다.
하지만 초기 비용투자가 사라졌을 뿐이지 염두해둬야 하는 사항이 몇가지가 있다.
	복잡성: 플레이어가 직접 서버를 띄우도록 하는 것보다 아무래도 전용 서버군을 운영하는 것이 개발사 측에선 더 복잡하다.
		클라우드 업체에서 인프라와 관리 SW를 제공한다해도 커스틈 프로세스를 작성하고 가상 머신 관리 코드를 개발하는 것과 클라우드 업체의 API에 대해서도 알아야한다.
	비용: 초기 투자 및 장기적 비용이 줄긴 하겠다만 항상 그렇지 않은것도 사실이다.
	제삼자 의존: 클라우드 호스팅 업체 자체에서 서버가 나가버리면 해결될때까지 할 수 있는게 없다.
	예상치 못한 하드웨어 변경: 호스팅 업체는 하드웨어 사양을 최소 정의 사양 이상으로 보장해주는데, 사전통보없이 하드웨어를 바꿀 수도 있다.
		교체된 장비에서 오는 테스트하지 못한 오류들이 발생할 소지가 있다.
	유저의 주인의식 약화: 초창기엔 유저들이 직접 서버를 운영했는데, 여기에 큰 긍지를 갖는 유저들도 많았다.
		클라우드 방식으로 하다보면 유저가 직접 서버를 구동하는 것보단 주인의식이 떨어질 수 밖에 없다.
이러한 단점들을 상쇄할만한 장점들이 많다.
	신뢰할 수 있고 규모 가변적인 데다 대역폭도 높은 서버군: 서버의 특성상 좋은 성능의 장비와 큰 대역폭이 필요한데, 이를 충분히 해결해준다.
	치트 방지: 서버를 전적으로 개발사 측에서 통제하면 변조되거나 비합법적인 버전이 실행될 가능성을 원천적으로 차단할 수 있다.
		그렇기에 서버 운영을 하는 일부 플레이어의 양심에 맡기지 않아도 된다.
	합리적인 복제 방지 수단: 어떤 게임에는 DMR(Digital Right Management, 디지털 권리 관리)이 필요하기도 한데(소액 결제에 의존하는 게임들) 회사에서 운영하는 서버에만 전용 서버를 호스팅하게 한다면 비침해적 DRM을 제공하는 것과 마찬가지다.	
		플레이어에세 서버 실행 파일을 배포하지 않으므로 해킹이나 불법 콘텐츠를 제작하는 행위를 막을 수 있다.

필수 도구
	REST API: REST(Representation State Transfer)는 서버에 어떤 요청을 할때 필요한 문맥의 내용 전체를 요청 그 자체에 담아,
		해석을 위해 그 이전 또는 이후 요청에 의존치 않도록 한다는 원칙에 입각한 인터페이스. HTTP가 대표적인 예시.
		REST 인터페이스의 가장 큰 장점은 내용이 평문 텍스트로 되어있다는 점이다.
	JSON 데이터: 자바스크립트 언어의 하위 표준. 텍스트 기반이므로 XML처럼 사람이 읽을 수 있다.
		REST. 쿼리와도 궁합이 잘맞으며 REST의 요청 데이터를 JSON 포맷으로 할 수 있다. 또한 기본 자료형도 지원한다.
	Node.js: 백 엔드 서비스를 자바스크립트로 구현하는 용도의 오픈 소스 엔진. 
		싱글 스레드 기반의 이벤트 주도형 자바스크립트 환경을 제공함.
		레이스 컨디션(Race Condition) 같은 문제를 방지하면서 논블로킹 비동기 작업이 수행될 환경을 조성해주기에 REST 요청을 처리하는 서비스 구현에 좋은 환경이 된다.

용어
	서버 - 게임 월드의 진본을 시뮬하며 클라에 리플리케이션해 주는 코드
	서버 게임 인스턴스 - 게임 월드를 시뮬하고 클라에 정보를 리플리케이션하는 프로그램

	게임 서버 프로세스 - 게임 인스턴스는 게임 서버 프로세스 내부에서 구동되어야 한다. 프로세스는 인스턴스를 갱신해주고 클라 관리와 운영체제와 상호작용 등등을 한다.
		제대로 추상화 된 코드라면 하나의 프로세스는 여러 게임 인스턴스를 관리할 수 있다. 그러면서 데이터 공유, 스케줄링 세밀 작업 등의 장점을 가져올 수 있다.
		하지만 인스턴스 중 하나가 크래쉬되면 전체 프로세스가 죽게되며 공유 리소스 영역을 훼손할 위험이 있다.
		프로세스 하나에 인스턴스를 하나만 할 것인지, 여러개를 할것인지 정하면 된다.

	게임 서버 머신 - 게임 서버 프로세스 또한 게임 서버 머신 위에서 구동된다. 인스턴스 처럼 한개를 할건지, 여러개를 할건지 구분하면 된다.
		머신당 몇개의 프로세스를 돌릴진 게임의 퍼포면스에 따라 결정하고 요즘 운영체제는 멀티 프로세스를 잘 지원하기 때문에 대부분 여러 프로세스를 돌리는 방식을 택한다.
		
	하드웨어 - 클라우드에선 게임 서버 '머신'이 꼭 하드웨어 장치 하나를 의미하지 않는다. 가상머신을 이용하여 필요할때마다 띄우고 내리는 작업을 한다. (코어수에 따라서?)

로컬 서버 프로세스 관리자
	게임 머신이 프로세스를 띄우고 그냥 잘 돌아가겠거니 생각해서는 안된다.
	계속해서 모니터링을 해야하는데, 게임에 메모리 누수가 있다면 프로세스가 크래쉬가 날 수 있고 가상 머신은 이를 인지하고 살려내야한다.
	이러한 이유로 견고한 프로비저닝 시스템(Provisioning System)이 필요한데, 플랫폼에 덜 종속되고 보다 안정적인 방법으로 로컬 서버 프로세스 관리자(Local Server Process Manager, LSPM)를 만드는 것이다.
	LSPM도 하나의 프로세스인데 원격 명령을 리스닝하다가 요청 시 서버 프로세스를 띄우고 모니터링하여 감시하는 역할을 한다.
	- 프로세스 모니터링: LSPM은 REST에 자신의 상태를 알리는데, 자신이 살아있음을 이름 그래도 주기적으로 알리는 패킷으로 하트비트라고 한다.
		
가상머신 관리자: LSPM으로 원격 시동 및 모니터링하는 것이 가능해졌지만, 가상머신을 띄우거나 하지 못한다. 그렇기에 가상 머신 관리자, VMM을 구축해야한다.
	VMM은 어떤 소프트웨어를 머신에 올릴건지 정해야하는데 이를 가상 머신 이미지, VMI라 하고 이는 OS, 프로세스 실행 파일, 부팅시 초기화 스크립트 등이 모두 담겨있다.
	이 VMI은 업체마다 포맷이 다르다. VM 프로비저닝을 준비하려면 서비스에 사용할 운영체제로 VMI를 만들고 게임 서버 실행파일을 적재한 다음 LSPM 및 기타 필요한 에셋을 같이 수록해둔다.
	- 가상머신 모니터링: VMM이 LSPM의 상태를 정확히 인지할 수 있게끔 LSPM은 매번 상태 갱신을 VMM에 보낸다.
		현재 실행중인 프로세스가 없다는 것으로 판명되면 VMM은 LSPM과 셧다운 핸드셰이킹을 개시한다. LSPM이 프로세스를 띄우는 와중에 VMM이 종료 시키려 시도하지 못하게 하기 위함이다.

 




















