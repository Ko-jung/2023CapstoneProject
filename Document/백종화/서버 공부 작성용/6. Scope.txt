한 서버에 접속한 모든 클라이언트 끼리 통신할 필요가 없다.
한 클라이언트 기준에서 스코프내에 있는 객체끼리만 통신하면 된다.
그 스코프를 정하는 기준은 애매하면서 다양하다.

스태틱 존: 월드를 고정된 여러 개로 나눈 각각의 지역
	같은 스태틱 존에있는 플레이어들끼리만 통신(리플리케이션)하게 한다.
	MMORPG같은 곳에서 많이 사용하는데, 단점으론 지역마다 플레이어 분포가 고르다는 전제하에 사용가능하다.
	또한 액션 게임에서도 많이 쓰지 않는다. 월드가 작을 뿐더러 게임템포가 빨라 지역 경계를 넘어갈 때 생기는 지연을 용납못하기 때문

시야절두체 사용: 3D렌더링에 쓰이는 시야 절두체를 써서 절두체 안에 있는 객체와 상호작용
	매우 직관적으로 가시성 판정을 내릴 수 있다.
	하지만 플레이어가 순식간에 180도 회전한다면 그에 맞는 스코프를 갱신하므로 그 지연시간동안 잠시 객체가 보이지 않는다.
	또한 벽에 가려져 있는 것도 절두체 안에 있으므로 불필요한 리플리케이션이 일어난다는 문제도 있다.

	보완을 위해 시야 절두체에 거리 판정을 병행하면 어느정도 해결가능하다.
	플레이어 중심에서 일정 범위 구 내에 있는 모든 것들과 절두체에 들어가있는 객체들

기타 가시성
	트랙이 있는 레이싱 게임을 예로 들어보자. 직진 도로에서는 멀리 보이고 회전중엔 시야가 짧게 보일것이다. 오르막 내리막일때도 서로 시야가 다르다
	이때 PVS(Potentially Visiable Set, 잠재적 가시 집합)라는 개념을 도입할 수 있다. 스태틱 존과 비슷한 접근 방식이긴 하나, 스태틱 존보다 지역을 훨씬 작게 잡는다.
	PVS를 구현하기 위해선 월드를 볼록 다각형, 필요시엔 3D 볼록 껍질(Convex Hull)로 나누어 두어야 한다.
	레이싱 게임에서 적용해본다면 트랙을 적당히 나누고 플레이어가 위치한 트랙의 앞 3, 뒤 1개 정도를 스코프로 지정한다.
	PVS는 레이싱 뿐만 아니라 맵의 구간을 나누는 기준이 명확한 게임, 복도 기반 게임 둠 이나 퀘이크 류 FPS에 잘 어울리는 방식이다.

보이지 않아도 스코프에 포함되어야 하는 경우
	수류탄같이 폭발하는 순간 목격하지 않아도 소리를 들어야 하는 경우가 있다.
	수류탄을 '보이는 범위'가 아닌 반지름으로 '들리는 범위'로 판단하는 방법도 있고,
	스코프 바깥의 클라이언트에게 폭발 효과를 RPC로 리플리케이션하는 방법이 있다.
	
서버 파티셔닝: 여러 개의 서버 프로세스를 동시에 구동
	대부분 게임은 각 게임 인스턴스마다 최대 플레이어 수에 제한을 두기에 다른 인스턴스끼리는 통신할 필요가 없다.
	MMO의 스태틱 존 개념을 확장하여 서버 파티셔닝을 적용할 수도 있다. 구체적으론 각 스태틱 존마다 개별 프로세스로 구동하는 것이다.
	이때 스태틱 존과 마찬가지로 서버 파티셔닝 또한 플레이어가 서버마다 적당히 균일하게 분포되어야 제기능을 한다.

인스턴싱: 하나의 월드에서 여러 별개의 게임 인스턴스를 동시에 돌리는 것
	던전 또는 시나리오 플레이시 서로 다른 인스턴스에 모여서 제한된 인원끼리 플레이하는 거
	한 무리의 플레이어들이 다른 플레이어의 간섭없이 게임플레이를 체험할 수 있다.
	성능 면에서 인스턴스를 올리고 내리는데 필요한 시간과 비용만 잘 제어한다면 인스턴싱은 여러모로 유리하다

우선순위, 빈도
	리플리케이션하는 객체에 우선순위를 주는 방법도 있다. 대역폭이 제한되어 있을 때 중요한거 먼저 해주는 식이다
	하지만 역시 낮은 객체도 언젠간 해줘야한다.
