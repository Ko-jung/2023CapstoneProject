패킷 스니핑: 일반적 네트워크 동작 수행 외의 목적으로 패킷 데이터를 읽어 들이는 행위
	중간자 공격: 발신지에서 목적지로 가는 경로 도중 한 지점의 컴퓨터가 패킷을 감청
		데이터 중 민감한 부분을 암호화 하는 것이 해결방법(구매 내역, 신용카드정보, 로그인 정보)
		'공유 키 암호화'를 대부분 쓴다. A, B가 통신할 때, 각자 사설키와 공유키를 보유하고 A가 보낼때 B의 공유키로 암호화 한 후 송신한다. 그러면 B는 자신의 사설키로 복호화를 진행한다.
		OpenSSL같은 오픈소스 RSA 시스템을 추천한다.

	하지만 오래걸리긴 해도 해커가 클라 어딘가에 숨겨져있는 키를 발견한다면 해킹이 발생할 수 있다. 
	그렇기에 암호화를 계속 진행하면서 암호 키와 메모리 오프셋을 정기적으로 변경하는 것을 추천한다.
	매 업데이트마다 해버린다면 해커는 계속 찾아야 할 것이고, 그러다보면 치트를 개발을 포기하게 될것이다.

	또한 패킷 스니핑을 시도하는 플레이어가 원하는 정보를 예측하는 것도 도움이 된다
	예를 들어 은신상태인 객체를 리플리케이션한다면 치터는 그 정보를 가지고 위치를 알 수 있을것이다.
	하지만 은신 상태일땐 리플리케이션을 아예 안한다면 스니핑을 하더라도 정보가 없으니 위치를 모르게된다.
	
	이처럼 클라이언트에 보내는 모든 데이터들이 누군가에게 보여진다고 가정해야한다.

입력검증: 플레이어가 잘못된 액션 입력을 하지 못하게 막는 방법
	한 행동을 위해 수반되는 여러 정보들이 참인지(총 쏘기위해 총을 들고 있는지, 총알이 있는지, 과열 상태는 아닌지) 확인하여 수행하는 방법
	CS와 P2P 둘 다 잘 적용되는 기법이긴 하나, 플레이어가 서버의 호스트를 맡는 게임에선 확실치 않게된다.
	클라우드 서버로 아예 플레이어에게 서버 호스트 권한을 안주는게 베스트지만, 기획으로 그렇게 하겠다면 서버가 보내주는 정보를 클라끼리 서로 검사하는 방법을 추가해야 한다.

소프트웨어 치트감지: 게임 프로세스 내 또는 프로세스 외부에 별도의 소프트웨어를 구동하여 게임의 무결성을 능동적으로 감시하는 기법
	맵핵, 에임봇 등등 소프트웨어 치트 감지로만 봇을 찾아낼 수 있는 치트들이 있다.
	VAC: 밸브에서 개발한 소프트웨어 치트 감지 플랫폼, 스팀웍스 SDK를 사용하는 게임에 적용가능
		런타임에서 이미 알려진 치트 프로그램을 검색, 서버 접속시 클라가 서버에 체크섬 계산하여 제출하고 불일치가 있으면 튕기는 방식으로 구동한다
	워든: 블라지드에서 개발하여 적용한 치트감지
		VAC와 비슷하게 작용하고 게임 실행도중 워든이 업데이트를 수행한다는 강점이 있음
		업데이트가 진행되면 대부분 치트를 끄므로 몰래 잡아내기가 가능해짐

서버 보안:
	디도스 공격: 
	악성 데이터: 퍼즈 테스팅(fuzz testing)이라는 자동화 테스트를 수행하는 것이 최선의 방책
	소요 시간 분석 공격: 고의로 잘못된 데이터를 보내고 그것이 거부되는 데까지 걸리는 시간을 측정하여 해시 알고리즘이나 암호화 시스템 구현 내역에 대한 힌트를 얻는 방식
		for문을 돌리다가 최적화 구현을 위해 return을 빨리 부르는 코드 같은것들이 예시가 된다. 따라서 비트 XOR연산 후 불일치 지점에 상관없이 같은 수행시간이 걸리게 구현한다.
	침입: 서버의 모든 소프트웨어를 최신버전으로 업데이트하는 것이 최선. 또한 서버에서 구동하는 소프트웨어의 숫자를 줄이기.
		
