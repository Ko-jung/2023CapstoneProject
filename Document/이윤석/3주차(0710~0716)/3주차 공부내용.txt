오늘 공부 내용 (20230712)
1. UFUNCTION(BlueprintCallable)

2. PhysicsHandle
https://docs.unrealengine.com/4.27/en-US/API/Runtime/Engine/PhysicsEngine/UPhysicsHandleComponent/

3. A* B =  GetOwner()->FindComponentByClass<A>(); 를 통해
자신의 소유 클래스에서 해당 ~~~의 클래스 컴퍼넌트를 가져올 수 있는 것 으로 보임

4. DrawDebugLine, DrawDebugSphere 와 같이 시각적으로 디버깅 가능한 방법이 있음
#include "DrawDebugHelpers.h"

5. HitResult 의 구조체에 많은 정보가 담겨있고,
Location, ImpactPoint 등이 있는데
Location이 범위를 체크하는 본체의 위치,
ImpactPoint가 HitLocation 같은 느낌인 것 같음

6. PhysicsHandle 에 GrabComponentAtLocationWithRotation() 이 있는데
필요한 인자로 UPrimitiveComponent 가 필요,
이는 HitResult에 있는데 (FHitResult에 대한 공식 문서 확인하기)GetComponent() 쓰면 됨

7. 모든 헤더파일에서 "자신.generated.h" 가 가장 후에 포함되어야함(이유는 모르겠으므로 나중에 확인해보기)


2023 07 13
1. 물리 기반 시스템은 성능상의 이유로 슬립 상태로 들어가는데
물리 적용 시키기전 HitResult에서 GetComponent()로 컴퍼넌트를 받아오고,
그 HitComponent->WakeAllRigidBodies(); 로 물리 시스템을 꺠워주면 일부 오류를 없앨 수 있음

2. 아웃 파라미터를 활용해 함수에서 여러개의 리턴을 할 수 있도록 설정하기

3. BoxTrigger를 상속받은 C++ 클래스를 제작

2023 07 14, 15
1. 컴퍼넌트의 tick event의 경우 성능상의 이유로 처음엔 이벤트 틱이 비활성화 되어 있는데,
tick을 원할 경우 PrimaryComponentTick.bCanEverTick 의 값을 True/False로 설정해주면 됨!
(생성자에서)
(라이브코딩에선 적용이 잘 안될때도 있으니 빌드를 다시 해줘야함)

2. TArray<타입> 을 통해 배열 생성 가능, 동적이라고 함(C++에서의 Array와는 다른 모습)
TArray<AActor*> Actors;
GetOverlappingActors(Actors);

3. 당연히 범위기반 for문도 사용 가능
 for(AActor* Actor : Actors)
    {
        FString Name = Actors->GetActorNameOrLabel();
        UE_LOG(LogTemp, Display, TEXT("%s"), *Name);
    }
만약 for문을 사용할 경우 TArray에선 Actors.size()가 아니라 Actors.Num() 인 것 같음 기존 STL과 언리얼엔진의 컨테이너들에 대해 살펴보기

4. C++과 달리 파라미터 이름과 변수의 이름이 같으면 안됨(섀도잉 기법이라고 함)

5. ********************아주중요*********************
에디터가 저장이 안되고 계속 초기화가 될 시 다시 빌드를 해주는데
XXXEditor Win64 Development Build 옵션으로 빌드 해줘야함
참고사이트 : https://vrworld.tistory.com/14

2023.07.16
1. AActor::AttachToComponent() 를 통해 특정 액터의 루트 컴퍼넌트를 다른 컴퍼넌트에 부착
(블루프린트에 있는 노드와 동일한 기능)
블루프린트에선 리스트박스로 선택지였던 옵션들을 인자로 넘겨줘야 하는데
FAttachmentTransformRules::KeepWorldTransform

2. UPrimitiveComponent::SetSimulatePhysics(bool) 을 통해
해당 액터의 물리 작용이 되게 할지 안되게 할지 설정
(블루프린트와 동일)

3. Cast<AAA>(aaa) 를 통해 캐스팅
BoxTriggerComponent.cpp 25줄
 UPrimitiveComponent* Component = Cast<UPrimitiveComponent>(Actor->GetRootComponent());       
                                                                    //GetrootComponent 는 USceneComponent* 를 반환
                                                                    //따라서 UPrimitiveComponent로 캐스트하여 갖고있는지 확인
                                                                    //만약 갖고있다면 해당 컴퍼넌트의 포인터를 리턴
                                                                    //아니라면 nullptr를 반환

4. Actor에겐 Tags 라는 FName타입의 TArray가 있음 -> 이값으로 해당 태그를 가졌는지 체크하는 방식이었구나
TArray::Add(item)하여 추가한다 라던가 TArray::Remove(item)을 하면 해당 아이템에 대한걸 모두 지워버림
TArray::RemoveAt(index)를 통해 해당 인덱스 요소를 지울수도 있음
이를 통해 해당 액터에 태그를 추가하고 제거할 수 있으며 이를 활용해 로직이 작동하게 할지, 안하게 할지 설정 가능
어느순간엔 플레이어였다가, 어느순간엔 적이된다던가 그런게 이런식으로 체크를 하는것 같음<- 예전부터 해온 고민 해결
하지만 그럼 모든 액터마다 Tag에대한 FName TArray에 대한 공간할당이나
시간상의 문제가 발생한다던가 예상외의 오류가 발생하지 않을까

5. 프로젝트 설정 exposure 를 설정하여 했었는데,
PostProcessVolume 을 놓고 디페일 패널의 etering Mode - Auto Exposure Basic 을 통해 동일한 기능 가능 

6. (블루프린트) Get Component By Class 를 통해 해당 액터에 특정 클래스의 컴퍼넌트를 가져올 수 있음
(당연히 직접 만든 C++ 클래스의 컴퍼넌트도 가져올 수 있음)

섹션4 총정리
래퍼런스, 포인터
Actor Component(무버), SceneComponent(트리거박스) 만들어보기
헤더파일(UPrimitive...) 추가해 해당 기능 사용
루멘 라이팅 활용
모듈러 레벨을 활용해 맵 디자인
라인 트레이싱을 통한 물체 이동 과 콜리젼
블루프린트에서 호출 가능한 C++ 함수를 만들어 블루프린트에서 이를 활용