공부한 내용
2023 07 17
휴식

2023 07 18
1. Tools - New C++ Class 에서 나오는 선택지들을 통해 각 클래스들을 상속 받으면 무슨 역할을 하는지 확인 가능
(해당 선택지에 마우스를 올려 확인 가능)

2. Pawn을 상속해 C++ class 를 만들면
SetupPlayerInputComponent 함수가 있고, 이에서 입력을 처리
+ RootComponent가 기본적으로 있음 (정의로 이동해보면 Actor.h 속 TObjectPtr<USceneComponent> RootComponent 가 있음
				-> TObjectPtr<A> 에 대해 알아보기 (https://husk321.tistory.com/377)
				-> 원시 포인터(A*)를 대체하기 위한 UObject 포인터 // 스마트포인터와 유사 // 자동으로 형변환 등 기존 원시 포인터와 다를건 없다고 함
				-> (**공식문서에서) 원시포인터보다 TObjectPtr을 사용하는걸 권장한다고 함 (에디터 내에서 다이나믹 해상도, 액세스 트래킹 추가?)
				-> 어쨌든 공식에서 하라고 하고, 언리얼엔진의 코드가 이 방식을 사용하니 익숙해지자.


3.
USceneComponent  -> 변형(위치, 회전 등)의 정보 가짐 -> 씬에 배치 가능
		->Attachment 지원(다른 컴퍼넌트를 씬에 연결 가능) // transform 정보를 알고있어서 해당 위치로 붙일 수 있는것 아닐까?
		-> 비쥬얼 정보가 없음
		파생 예시) 
			1. UCapsuleComponent(충돌을 처리하기 위한 컴퍼넌트)
			2. StaticMeshComponent(시각적 표현을 추가)

(메모)
강의에선 주로 VS Code 를 통해 진행하는데, 강의자료인 4.22버전 프로젝트를 버전스위치를 통해 5.1로 켜서 비쥬얼 스튜디오로 진행할 경우 빌드가 정상적으로 되지 않았다.
처음엔 파일이름.generated.h 를 찾지 못했다고 뜨길래 
https://parksh86.tistory.com/172    (<- 여기서 .generated.h 파일이 왜 맨 마지막에 나와야 하는지 알 수는 있었다)
https://www.inflearn.com/questions/736584/ue5-generated-h-%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1%EC%9D%B4-%EC%95%88%EB%8F%BC%EC%9A%94
https://bangp.tistory.com/36
다 해봤으나 해결하지 못했고, 
다른 오류가 뜬다 해도 언리얼엔진 폴더 디렉토리 내에 Build.bat ~~ 명령이 중지되었습니다~~ 에서 더 이상 찾을 수 없어
결국 5.1버전에 맞게 새로 프로젝트를 만든 결과 해결되었다. 
버전 스위칭 시 오류가 생길 수 있다곤 하는데 4버전과 5버전의 차이인건지, 버전스위치 자체의 문제인진 몰라도 새로운 프로젝트에서 계속 진행할 계획이다.

2023.07.19
강의를 보기전 Jet Brains의 ReSharper C++ 을 설치하였다.
VS에서 언리얼엔진 C++에 대해 인텔리센스(자동완성) 기능이 조금 미흡한 점이 많다는데
저 플러그인이 역할을 보조해 준다고 함

1. UPROPERTY는 해당 변수가 언리얼 엔진 리플렉션 시스템에 참여하게 하고,
리플렉션 시스템에선 "블루프린트에 노출되는 기능" // "가비지 컬렉션에 참여되게 하는 기능" 등을 제공

2. [C++ 전방선언] ** 나중에 한번 찾아보기
윤정현 교수님 STL 수업때도 한번 스쳐지나가듯 설명 들었던 것 같은데
헤더파일 선언을 하면 프리 프로세서 라는 프로그램이 주석포함 모든 코드를 가져오는데,
이렇게 하지 말고 
UCapsuleComponent* CapsuleComp; 선언할 경우
class UCapsuleComponent* CapsuleComp;로 선언한다는 것
나는 이전에 작성한 것 처럼
TObjectPtr<UCapsuleComponent> CapsuleComp; 를 사용해서
헤더선언부 아래에 class UCapsuleComponent; 를 추가했다.
* 선언부에선 그저 포인터(주솟값)이기에 메모리 크기도 같아서 문제 될 것이 없는 구조

3. CreateDefaultSubobject<만들고 싶은 클래스> (TEXT("원하는 이름")) ;
해당 함수는 새로 생성된 컴퍼넌트의 주소 반환
(참고) GetDefaultSubobjectByName() 이라는 특정 오브젝트에 속한 하위 오브젝트중 이름으로 검색해 오브젝트를 찾는 함수도 있음

4. RootComponent = CapsuleComp; 를 통해 블루프린트에서 특정 컴퍼넌트를 상위 루트 컴퍼넌트로 만들듯이 가능함

5.USceneComponent::SetupAttachment(USceneComponent* , FName(디폴트)) 를 통해 붙일 수 있음
UStaticMeshComponent는 USceneComponent의 파생이라서 붙이는 기능이 있음

6. 블루프린트에서 컴퍼넌트를 추가할 때와 달리 C++에서 컴퍼넌트를 만들고서 이를 상속받아 블루프린트 클래스를 만들면
class Defaults 에서 목록이 안나오는데, C++에서 이를 제어할 수 있음 -> 노출을 설정할 수 있음.
UPROPERTY() 속성값으로 변경이 가능한데
VisibleAnywhere -> Read O / Write X
EditAnywhere -> Read O / Write O
VisibleInstanceOnly -> 클래스 내의 Default 속성창에서는 안나오지만, 씬에 액터(인스턴스)를 만들면 그 액터는 해당 변수를 볼 수 있도록 설정
Edit~~ -> 동일하나 수정 가능한 기능
* 맥락에 대해서는 이해했지만 굳이 인스턴스 온리로 만들 필요성은 아직 안느껴짐. 클래스 디폴트 속성창에서 나오지 않는 것만 빼면 같은것 아닌가, 후에 찾아보기
VisibleDefaultOnly -> 디폴트 속성창에서만 보이게 하는 것
**이 중 이벤트 그래프로도 값을 설정하길 원하면 UPROPERTY(VisibleAnywhere, BlueprintReadWrite/BlueprintReadOnly)와 같이 설정해주면 됨.
***이벤트 그래프에서 활용할 수 있는건 좋지만 블루프린트 에디터 내에 My Blueprint 속성창에서 변수부분에서는 확인이 불가능 한 것이 아쉬움 -> 후에 방법 찾아보자

위의 속성들은 public 속성에서만 가능한데, private에서도 되길 원하면 UPROPERTY(VisibleAnywhere, BlueprintReadWrite, meta = (AllowPrivateAccess = "true")) 로 해주면 된다곤 하지만 방법중 하나일 뿐이라고 함

추가로 Category = "원하는 이름" 옵션을 추가할 시 해당 이름의 카테고리들로 나뉘어 표시됨
이벤트 그래프에서도 해당 이름으로 검색할 수 있으므로 카테고리를 잘 설정하면 찾는데도 훨씬 편할 것

2023.07.20
1. 특정 컴퍼넌트가 어느 헤더파일을 추가해야할 지 모를떈 역시 언리얼 엔진 공식 문서를 검색하는게 가장 빠르다.
예를들어 SpringArmComponent를 추가하고 싶을 때 구글에 ue5 Spring arm component 를 검색하면 언리얼 엔진 공식 문서가 나오고,
해당 사이트에 References 부분에 Include를 보면 #include "GameFramework/SpringArmComponent.h"  가 나와있다.

(궁금증) SetupAttachment() 를 통해서 붙였었는데 AttachToComponent()랑은 뭐가 다른걸까 둘다 해당 컴퍼넌트에 붙는 느낌은 같은데

2. 블루프린트 속성창(Pawn) - Class Settings - Class Options - Parent Class의 옵션을 바꾸면 쉽게 해당 블루프린트의 상속을 바꿀수있음(<- 아예 다른 옵션을 선택하면 어떻게 될지?) <- 강의보고 따라햇는데 에디터 크래시 일어남.. 
Unhandled Exception: EXCEPTION_ACCESS_VIOLATION reading address 0xffffffffffffffff
다시 들어오니 됨. 어쨰서 터진건지 의문이지만 자주 저장하는 습관을 들이자.

3. 강의에서는 언리얼엔진4 Input Action인 축 방식을 사용해서
언리얼엔진 5에서 사용하는 Input Mapping Context 방식을 C++로 찾아보았다.
https://intunknown.tistory.com/641
(이전 구세대 방식에선 bool 값을 통해 input 이 다를때를 처리했지만 WASD키를 이동으로 쓰느냐, 인벤창에서 아이템 선택으로 쓰느냐,
현재의 방식에선 Input Mapping Context의 우선순위를 통해 해결하였다.
(기존 게임엔진1 강의에선 매핑 컨텍스트를 연결했다 지웠다 연결했다 지웠다로 작업했는데 우선순위를 활용하는 방법을 생각해볼것)

(메모1) 따라가면서 FInputActionValue& 를 인자로 받는 함수를 만들게 됐는데,
이 상황에선 *를 갖는것이 아닌 &로 해당 클래스 자체의 메모리 크기를 알아야해서 전방선언은 통하지 않는 것 같음,
상황에 맞게 헤더파일을 더하고 뺴는것을 체크해야겠다.
(메모2) 기존 블루프린트 방식에선 굳이 IMC를 변수로 외부에서 설정해줄 필요는 없었는데, c++에선 직접 연결을 해줘야했다.
(메모3) https://velog.io/@cedongne/UE5-Unreal-Engine-5-%EA%B8%B8%EB%9D%BC%EC%9E%A1%EC%9D%B4-5.-%EB%A1%9C%EA%B9%85-%EB%B0%A9%EB%B2%95 로그가 발생한 함수도 알려주는 ABLOG / ABLOG_S
https://dev.epicgames.com/community/snippets/JvB/unreal-engine-c-print-string 및 스크린에서 디버깅 정보를 볼 수 있는 함수들

4. 해당 강의에선 AddActorLocalOffset() 을 사용할 것인데,
1. 액터를 액터의 로컬좌표계로 이동시킴 / 2. 단일의 움직임만으로 프레임마다 호출 등의 특징을 가진다.
(* 게임엔진1에선 Add Movement Input 을 썼었는데 이걸 활용할 수 있도록 알아보자.)
-> 강의가 아니라 찾은 링크를 통해 계속해서 진행하였다.
-> AddMovementInput에 값이 잘 들어가는데 왜 안되는가 했더니 이는 Character Movement 컴퍼넌트의 것이었음 생각해보니까...
관련 링크: https://forums.unrealengine.com/t/addmovementinput-isnt-working-for-me/814
-> 다시 강의를 따라 AddActorLocalOffset()으로 진행하기로 계획

(메모) FVector Location(0.f); 라 하면 x,y,z 모두 0.0f가 들어감!
FVector Location = FVector::ZeroVector; 도 동일
(메모) UGameplayStatics::GetWorldDeltaSeconds(WorldContextObject) , 블루프린트와 동일한 기능 DeltaTime 반환 -> UGameplayStatics::GetWorldDeltaSeconds(this); 로 해당 액터가 있는 월드의 델타타임을 알려줌!
#include "Kismet/GameplayStatics.h"

5. AddActorLocalOffset의 두번쨰 인자는 bool 타입으로, 충돌체크를 할 것 인지로 확인,
bool bSweep 이라는 인자인데, 스윕 이라는 단어가 두 오브젝트가 겹쳤는지 체크하고, 겹치면 특정 프레임으로 옮겨 부딪힌 것 처럼 충돌체크 하는 것 이라고 함. (블루프린트에서 Sweep이라는 단어가 뭔가 했는데 이제 이해 완료)
추가로 해당 함수에서의 충돌체크는 RootComponent에 대해서만 되고, 루트컴퍼넌트의 콜리젼이 설정이 안돼있다면 적용되지 않는다고 한다.
(메모) bSweep 을 true로 하니 이동이 안되는 문제가 발생했는데, 바닥면에서 다닐때에도 조금이라도 닿아있으면 문제가 되는 것 같았다.
처음엔 AddActorLocalOffset의 값에서 z에 0.0000001 의 값을 넣었으나, 장기적으론 무조건 위로 뜰것이므로, 지면에서 1cm정도 띄우니 해결되었다.
언리얼엔진 에디터 기능인 End키를 통해 액터를 바닥에 붙였는데 이것이 붙이는것도 충돌할 정도로 붙이는 것 같다.


2023 07 21 
1. Pawn은 Controller에 지배될 수 있고 
AController의 파생으로 AAIController / APlayerController 가 있으며,
GetController() 를 통해 해당 컨트롤러의 포인터를 가져올 수 있는데, 이는 AController* 를 반환하므로(반환되는 타입 자체는 AController* 지만, 안에 들은 내용물은 APlayerController*에 대한 포인터이다.
TObjectPtr<APlayerController> PlayerControllerRef = Cast<APlayerController>(GetController()); 로 사용하면 된다.
(메모) Cast<>()는 C++에서의 static/dynamic/... cast와 동일하게 되면 해당 주소를, 안되면 nullptr를 건네준다.

2. APlayerController::GetHitResultUnderCursor() : 화면상의 커서위치를 기반으로 카메라에서 Line Trace 광선을 쏴 FHitResult 정보를 얻어올 수 있음
HitResult.Actor 를 통해 충돌체크된 액터에 접근하거나,
HitResult.ImpactPoint()를 통해 위치를 가져올 수 있음 
-> DrawDebugSphere()로 디버깅 용 확인을 할 수 있음
(메모) DrawDebugSphere(UWorld*, FVector(센터 위치), float (구체반지름), int32(세그먼트 수), FColor, bool(지속되게?), float(지속 시간))

(메모) 게임엔진1에서 배웠듯, simple collision 을 활용해야 좀 더 수행 결과가 좋은데, 졸업작품에 쓰일 fps 게임의 경우엔 정밀한 체크가 필요할것.
이전 3D게임프로그래밍1과 게임수학때 들었던 내용 중, 먼저 처음엔 Head, Body, RightArm, RightHand, ..., Leg, ... 로 나누고 그 부위와 충돌체크 할 경우 그 부위의 정밀한 complex collision을 체크한다고 들었던 것 같다.

3. FVector::Rotation() 이 있는데, 원하는 방향의 벡터를 구해서, Rotation을 호출하면 그 방향에 대한 FRotator가 제공됨.
z축만으로 회전할지, 아니면 모든 축에 대해 회전을 할지 잘 체크하고 원하는 방향의 벡터를 건네줘야함.(Yaw값만 FRotator를 활용)

4. 현재 구조가 BasePawn 을 상속받은 Tank / Tower 가 있는데, 두 클래스 모두 터렛이 회전하는 옵션을 가져야 하므로 BasePawn에 함수를 구현하는 것이 맞음. *막 코딩하지 말고, 사용처가 중복되는지 체크하거나, 아니면 처음부터 구조를 잘 짜고 하는 습관을 들이자

(메모)  GetActorLocation() 과 동일하게 컴퍼넌트의 위치를 반환하는 USceneComponent::GetComponentLocation() 가 있음
(메모2) 컴퍼넌트의 경우엔 Set Actor Rotation() 이 아니라, USceneComponent::SetWorldRotation() 이 있음,
블루프린트 상에서 굳이 왜 액터에 대해 두개가 있을까? 생각했었는데 하나는 액터에 대해서 적용, 하나는 액터에대해서, 하나는 컴퍼넌트에 대해 적용이었구나
(중요 메모) Turret이 커서의 위치를 바라보도록 할 때, 부딪히는 액터가 없을 경우 Rotator가 이상하게 돌아가는 현상이 발생하는데, 이는 Blocking Volume 이라는 보이지않는 액터를 놓음으로써 해결할 수 있다.
또한 SetWorldRotation()을 하면 중앙부로 이동시 너무 확 도는 경향을 관찰할 수 있는데, 이를 위해 "보간"을 넣어야함.
보간을 넣는 방법으로, FMath::RInterpTo(현재Rot, 타겟Rot, 델타타임, 속도) 가 있음! (블루프린트 때 많이 썼었는데 FMath속 함수였다.)
**UGamePlayStatics::GetWorldDeltaSeconds(this) <- 이건 꼭 기억하자 **

5. UGameplayStatics::GetPlayerPawn(월드오브젝트*, 플레이어인덱스(0) ) 을 통해 플레이되는 캐릭터 폰을 가져올 수 있음,
게임엔진1에선 주로 Get Player Character 노드를 사용했는데, UGameplayStatics::GetPlayercharacter() 도 있는것을 확인
*블루프린트 노드 만으로도 게임을 만들 수 있는데, 이 노드들이 똑같이 C++에도 있고, C++에선 추가적인 작업이 가능하므로,
블루프린토 노드에 대해 파악하는 것의 중요성이 더욱 느껴짐

6. FVector::Dist(FVector, FVector)를 통해 두 벡터 사이의 길이를 구할 수 있음,
블루프린트 노드중에 Dist2D()를 몇번 써본적 있던 것 같은데, FVector::Dist2D() 도 있음

(메모) 클래스를 작성하다보면 C++ 다형성의 특징을 많이 경험하는데 매번 생각해내기 힘든것같다. c++에 좀 더 익숙해지자.

(메모) 이번에도 C++ 파일 수정 후 라이브 코딩을 하니 갑자기 에디터 크래시가 터지며 꺼졌다.
다시 키니 맵에 대한 정보가 날아갔었는데, 이럴 때 당황하지 않고 에디터를 끈 뒤(저장되는것 없게 하기) 다시 VS를 빌드하면 정상적으로 돌아왔고, 에러도 나지 않았다.
원인도 파악이 안되고 엔진 자체의 문제라고 하니, 계속 언급되지만, 자주 저장하는 습관을 들이자.(최소한 라이브 코딩을 하기 전에라도)


2023 07 22
1. FTimerManager
GetWorldTimerManager().SetTimer( FTimerHandle(FireRateTimerHandle) , 해당 클래스(this) , 콜백함수 (&ATower::CheckFireCondition) , 타이머 시간 (2.0f) , 반복?(true) );
함수를 바인딩하고 2초마다 해당 함수가 호출되도록 설정하는 타이머 기능 함수
윈플과 컴그때 쓴 타이머와 유사한 기능인 것 같다.

(메모) 항상 에디터 따로 키고 VS 따로 켜서 자동 로드 되다보니 cpp, h 파일들이 어디있는지 몰랐는데,
"프로젝트/Source/프로젝트이름폴더/" 안에 각 헤더와 cpp 파일들이 있다.
(메모) 항상 새 액터 클래스를 만들거나 할 때, Tick() 이벤트가 필요가 없다면 bCanEverTick을 false로 바꿔주는 습관을 들이자.
함수를 호출하는 데에도 연산이 적게 들어가는것은 아니기에, 몇백개 몇천개가 쌓이면 압도적인 차이를 보여줄 것.

2. 액터를 소환(Spawn Actor)할 때, c++ 클래스를 기반으로 소환하고 싶지만, c++클래스를 기반으로 블루프린트 클래스를 만들어 static mesh component를 추가하는 등, 블루프린트 클래스에 추가적인 정보가 있어 블루프린트 클래스를 기반으로 Spawn 해야함.
그러기 위해서는, TSubClassOf<>가 필요한데, 이는 UClass 클래스를 생성을 해주는데, 이는 C++와 블루프린트 클래스 사이 정보를 교환을 해준다고함
예를들어 AMyBasePawn 클래스에 
UPROPERTY(EditDefaultsOnly, Category = "Combat")
TSubclassOf<AProjetile> ProjectileClass;
을 추가하면, AMyBasePawn을 상속받은 Tank 블루프린트 클래스 와 Tower 블루프린트 클래스에 Class Defults 창에 Combat 카테고리에 Projectile Class 를 선택할 수 있는 옵션이 생긴다.
선택지는 None, BP_Projectile(블루프린트 클래스), Projectile(C++클래스) 가 있는데,
이는 TSubclassOf<AProjectile>가 AProjectile에 기반한 특정 타입으로 클래스를 설정할 수 있게 해줌.

3. UWorld::SpawnActor 함수
블루프린트 클래스의 액터를 Spawn Actor하려 한다면,  SpawnActor<AProjectile>(UClass, Location, Rotation); 의 구조에서 UClass 부분을 TSubClassOf<> 로 설정한 변수(UClass 타입)를 넣어주면 된다.
<>에 클래스를 넣었는데 왜 UClass로 추가로 적느냐면, <> 에서는 SpawnActor에게 어떤 C++타입을 만들어야 하는지 알려줄 뿐이지,
UClass안에는 더 많은 정보가 들어있음(스태틱 메시 등)
최종 구조는
	GetWorld()->SpawnActor<AProjectile>(
		ProjectileClass,
		ProjectileSpawnPoint->GetComponentLocation(),
		ProjectileSpawnPoint->GetComponentRotation()
	);

4. 오브젝트를 움직이게 하는데에는 직접 Tick()마다 Location/Rotation을 바꿔주는 방법도 있지만
Impulse를 추가해 엔진의 물리법칙에 맡기는 방법
Movement Component를 추가하는 방법(언리얼 엔진 내장 컴퍼넌트(캐릭터 무브먼트 같은 기능)) 등이 있다.
여기선 UProjectileMovementComponent를 사용할것임.
블루프린트 클래스에서 ProjectileMovement 라는 이름의 컴퍼넌트를 써본적이 있는데, 이것이 이에 해당하는것으로 확인

5. UStaticMeshComponent는 UPrimitiveComponent를 상속받았는데, UPrimitiveComponent는 HitEvents를 발생할 수 있음.
Hit시, Hit한 Component와 Actor를 알 수 있고, 추가로 FHitResult 결과값도 받을 수 있음.
ProjectileMesh->OnComponentHit (변수, 블루프린트에서의 On Component Hit Event 와 같은 것으로 보이는데, 이벤트라서 함수일 줄 알았는데 변수..?)
FComponentHitSignature OnComponentHit
(메모)Hit Event는 Multicast Delegate 라고도 하는데, 멀티캐스트 델리게이트에는 여러개의 함수를 바인딩 할 수 있다고 함.
함수가 바인딩 되면, Invocation list (list of functions to call) 라는 곳에 추가됨
이 Hit Event가 호출하라고 하면 호출되는 함수의 목록들이라고함.
OnComponentHitEvent 라는게 함수가 아니라 변수고, 이 변수가 호출하라고 하면 Invocation list 목록에 있는 함수들을 모두 호출을 하는 것으로 보임.

최종적인 모습은 (UStaticMeshComponent* 타입의 ) ProjectileMesh->OnComponentHit.AddDynamic( this, &AProjectile::OnHit ) 을 통해 사용자 객체와 콜백 함수를 넘길 수 있음, (이 콜백 함수를 Hit Event의 인보케이션 리스트에 추가)

(메모) 구조가 상당히 어려운 느낌이라, 당장에는 스태틱 메시 컴퍼넌트 클래스에 OnComponentHit이 있고, (종류에 따라 블루프린트에 있던 On Component Begin Overlap 등 이 있을 것으로 예상) 이 힛 이벤트에 AddDynamic을 통해 콜백함수를 바인딩 할 수 있고,
그 콜백함수에 Hit Event에 따른 원하는 로직을 구현하면 될 것으로 보인다.

콜백함수로는 인자가 필요한데,
void OnHit(
	UPrimitiveComponent* HitComp,	//부딪히는 일을 하는 컴퍼넌트(발사체 메시)
	AActor* OtherActor,			//충돌이 되는 액터
	UPrimitiveComponent* OtherComp,	//충돌 당하는 컴퍼넌트
	FVector NormalImpulse,		//물리 시뮬레이션시, 물리엔진이 충돌시 임펄스를 적용하는데 FVector가 임펄스의 방향과 크기를 나타낼것임
	const FHitRsult& Hit		//충돌에 대한 추가 정보  
);
추가로 델리게이트에 바인딩 하려면 UFUNCTION이어야 한다고 함.  

(메모) 갑자기 든 생각인데 함수에 필요한 인자라던가 반환값들이 블루프린트 노드랑 당연하겠지만 같은걸 확인할 수 있음,
코드를 작성하다가 해당 함수가 이해가 안될땐 블루프린트 에서 해당 노드를 꺼내보고 핀에 설명을 읽어서 해당 입력핀(함수의 인자) 라던가 출력핀(반환값)이 무엇을 의미하는지 봐도 아주 좋을것같음.

6. HP에 대한 혹은 상태에 대한 것을 나타낼때 원래는 모든 클래스마다 HP라는 변수를 두고 설정을 했었는데, 전에 메모한 내용에 있듯이 헬스 컴퍼넌트 (상태에 대해 나타내는 컴퍼넌트)를 만든 뒤에 그 컴퍼넌트를 모든 필요로 하는 애들한테 넣는게 훨씬 효율적이긴 하다. 기존에 생각 못했으므로, 습관화 들여서 생각해내보자.
그냥 모든 클래스에 대해서 중복되는게 있으면 굳이 따로 코딩할 필요가 없다는 것을 명백히 기억해보자.

(메모) UActorComponent -> USceneComponent(상속받음) 고, UActorComponent는 Transform의 정보도 없고, Attachment 기능도 없음(다른 컴퍼넌트에 붙일 수 없음) -> 속성값에 대한 설정에 적합
(메모) ActorComponent로 클래스를 만들 경우, UCLASS속성에 meta= (BlueprintSpawnableComponent) 가 있는데,
블루프린트에 직접 이 컴퍼넌트를 추가할수 있게 해주는 기능이라고 함.
CharacterMovement라던가 그런 등등의 컴퍼넌트를 블루프린트 내에서 추가할 수 있게 해주는 속성값이라고 보면 될 것 같다.
(메모) 블루프린트 상에서 CharacterMovement 라고 보였고, 실제 클래스의 이름은 UCharacterMovementComponent였는데
직접 만든 UHealthComponent도 블루프린트에선 Health라고만 나온다. 
클래스의 이름에서 Component부분은 빠지고서 이름이 나오는 것으로 확인된다.
(메모) 중복되는 로직에 대해서 C++ 다형성을 잘 구현하면, 추가적인 기능에 대해서만 상속받은 각각의 클래스에 작성하여서 클래스 자체 크기를 작게 만들면 더욱 관리하기 좋다!!

7. OnTakeAnyDamage 도 함수를 바인딩 하여 진행 가능한데, 데미지 이벤트가 발생할때마다, OnTakeAnyDamage 델리게이트가 브로드캐스트 하여 대상에게 알려주고 인보케이션 리스트에 바인딩 된 함수가 호출될 것.
블루프린트에서 총알이라는 액터가 On Hit Event에서 부딪힌 액터에게 Apply Damage노드를 호출해서 데미지를 주는 신호를 보내면,
해당 액터에서 EventAnyDamage 라는 이벤트를 통해 로직을 처리했는데 이에 대한 c++ 부분인 것 같다.

C++에서는 UGameplayStatics::ApplyDamage 가 있다.
(메모) 언리얼엔진에서는 UDamageType 이라는 클래스가 있는데,
예를들어 독에의한 데미지, 불에의한 데미지, 폭발에 의한 데미지 등 각 처리가 다르게 원할때 구현하면 된다고 하는데 중요한 정보인 것 같으니 나중에 확인해보자.

콜백함수의 예시인데,
void DamageTaken(AActor* DamagedActor, float Damage, const UDamageType* DamageType, AController* Instigator, AActor* DamageCauser);
각 처음부터 대미지를 준 액터 / 대미지 수치 / 대미지 타입 / 대미지를 준 대상의 컨트롤러(없다면 nullptr), 대미지를 받은 액터
콜백함수의 기능이므로 꼭 UFUNCTION()을 같이 붙여줘야함.

추가로 GetOwner() 을 통해 해당 컴퍼넌트의 소유자에게 접근할 수 있다.
AActor* 로 반환이 되므로 필요에 따라 캐스팅 해주면 됨.

UGameplayStatics::ApplyDamage(
(메모) 당연히 C++이기에 auto를 사용할 수 있었고, auto 변수 = ~~ 를 한 뒤 변수에 마우스 커서를 대면 해당 클래스가 무슨 클래스인지 알려준다.
(메모) 투사체를 SpawnActor할 때, 반환값으로 해당 투사체 액터에 대한 포인터를 반환하는데,
이후 그 반환값에 SetOwner(this); 를 통해 해당 액터를 소환한 소유자를 연결할 수 있다.
이 값을 토대로 ApplyDamage에서 GetOwner()을 통해 활용할 수 있다
UDamageType::StaticClass()를 통해 굳이 DamageType에 대해 만들지 않아도 사용은 가능하며,
대미지 타입 공식문서 설명부분을 나중에 한번 확인해보자.

와.. if(OtherActor && OtherActor != this && OtherActor != MyOwner ) 라는 조건문을 이용해 충돌시 로직을 진행하는데
마지막에 OtherActor != MyOwner 을 보면 만약 플레이가 총알을 쏘면 그 총알은 플레이어랑은 충돌시 로직이 되지 않게 하는건데,
초반 블루프린트 작업 하면서 투사체를 생성한 액터가 바로 투사체랑 부딪혀서 정상적으로 작동하지 않는 일 떄문에 일부러 초반 0.5초동안엔 물리작용이 되지 않도록 No Collision 속성으로 돌렸다가, 0.5초뒤 Query Only 같은 속성으로 바꾸는 등의 작업을 했었는데,
블루프린트에서의 노드 개념이 안잡혔던건지, C++에서만 가능한 점인진 몰라도 저런 문제점이 쉽게 해결되는 것 같다.

추가로 블루프린트에선 Destroy Actor 였는데, C++ 에서는 그냥 Destroy였다.