2023 07 31
휴식

2023 08 01
(메모) 에디터 뷰 세팅에서 (기본 Lit) Player Collision(덜 정밀) / Visibility Collision(더 정밀)을 선택시 더 정밀하게 볼 수 있고(겉 덩어리 메쉬를 안보이게 해주는 듯 함), static mesh 에디터 뷰어에서도 이를 설정할 수 있음.

(강의에서는 애니메이션에 대해서는 C++보다는 애니메이션 블루프린트를 활용하는게 좋다고함, 애니메이션 블루프린트를 활용해서 강의를 진행하는데 이미 게임엔진1에서 배운 내용이라 새롭거나 복습내용을 적는게 아니라면 따로 메모는 안함)
Blend/Blend Space
locomotion(운동)
Blend Space에서 LSHIFT를 누른채로 애니메이션 에셋핀을 움직이면 격자에 맞게움직임
(블렌드 스페이스에서 가로축과 세로축의 정확한 의미와 현재 사람들이 쓰는 명확한 방식이 무엇인지 찾아보기)

액터의 forward vector 를 이용해서 회전값을 구하기 (Get Velocity후 Inverse Transform Direction을 이용해서 그 벡터를 구하고, 해당 벡터로부터 Rotation From X Vector노드를 이용해 X축으로부터의 회전값을 구한 뒤 필요한 정보만 활용,
해당 경우에선 캐릭터가 좌 우 회전에 대한 값을 필요로 하므로 z축의 회전값인 yaw 값이 필요함)

2023 08 02
*중요해보이는것
애니메이션 속도
걷기 뛰기의 경우 적당한 속도에서 애니메이션을 재생하지 않을 경우 바닥을 미끄러지듯 가는 현상을 볼 수 있는데,
애니메이션 에셋에서 복사뼈의 이동 거리를 판단하여 속도를 계산하는 방법을 통해 애니메이션의 속도를 확인할 수 있다.
기존 게임엔진1에서는 그냥 미끄러지는듯이 보일 경우 속도를 바꿔주는 정도로 해서 파악했는데, (예를들어 600cm/s 일 때 걷기를 하면 어색한 느낌인 것) 직접 본의 위치를 파악해서 하는것이 정밀한 방법이기도 하고, 이런 사소한 것에서 디테일이 살아나므로 중요하다고 느껴짐.(물론 시간적으로 소요가 아주 크므로 어색함이 없는 정도에서 간소하게 진행하는게 나아보이긴함)
하나는 발이 닿는 지점에서의 (*World기준)Y좌표값과 시간, (강의 기준에선 0.19초에서 Y = 8.20)
하나는 발을 떼는 지점에서의 ... 		           (강의 기준에선 0.33초에서 Y=-35.xx)
공식은 foot_speed = (y_finish - y_start) / (t_finish - t_start)
공식을 보아하니 거리 = 시간x속력 의 식을 수정한 것으로 보임
계산하면 foot_speed = -325.~~로 나오는데
이는 발의 Y값이 후진으로 계산된것이고, 325cm/s 의 속도로 가는것,

2023 08 03
1. GetWorld()->SpawnActor<클래스>(); 로 액터를 소환할 때,
해당 알려주는 클래스는 C++이지만 원하는 정보는 C++에서 파생된 블루프린트 클래스를 필요로 하므로 "후킹"이 필요
이를 위해 헤더파일에
UPROPERTY(EditDefaultsOnly)
	TSubclassOf<AGun> RifleClass;
와 같이 추가해주고(클래스에 대한 정보를 담을 수 있는 TSubclassOf를 사용, 추가로 EditDefaultsOnly를 통해 런타임중 수정이 안되도록 에디터의 디폴트 설정에서만 바뀔 수 있도록 설정
추가로 총에 대한 정보를 담을 
UPROPERTY()
	TObjectPtr<AGun> GunActor;
를 만들어주면 됨.
ㄴ * 여기서 처음엔 프로그램이 다운돼서 TSubclassOf<>는 전방선언으로는 안되고 정보를 필요로 하므로 헤더파일을 포함해줘야 하는 줄 알았으나, 다시 가동하니 정상적으로 작동하였다.
항상.. 저장하자.. 다만 다행인점은 C++로 할 때에는, 코드로 데이터가 저장이 되어서인지 저장을 미처 못눌러도 어느정도 기록이 남아있고, 블루프린트 상에서 설정한 값만 날아가는 것 같다. 

이후 BeginPlay()에서
GunActor = GetWorld()->SpawnActor<AGun>();
다음과 같이 액터를 소환 해 연결해준다.

2. C++코드에서 스켈레탈 메시의 특정 본을 숨길 수 있음
GetMesh()->HideBoneByName(TEXT("weapon_r"), EPhysBodyOp::PBO_None);
메쉬에 접근하여 SkinnedMeshComponent->HideBoneByName() 을 통하여 해당 본을 숨김

3. 소켓을 만들고
	GunActor->AttachToComponent(GetMesh(), FAttachmentTransformRules::KeepRelativeTransform,TEXT("WeaponSocket"));
를 통해 붙일 수 있음.
블루프린트 노드 AttachToComponent와 동일

4. Owner이 작용하는 곳은 멀티플레이어와 데미지 인데,
대미지 의 측면을 위해 GunActor의 Owner를 캐릭터로 설정해야 하는 것으로 보임,
GunActor->SetOwner(this);

5. Socket 에디터 뷰어에서도 소켓에 static mesh를 추가하고서 조정하여 소켓으 ㅣ위치를 설정할 수 있지만,
에디터 상에서 플레이를 한 뒤에 f8을 통해 컨트롤러를 플레이어로부터 나와서 그곳에서 해당 소켓에 달린 액터 혹은 컴퍼넌트를 조절하고 그 값을 토대로 소켓에 가서 값을 조정해도 됨.
개인적으로는 플레이를 한 뒤에 하는거도 나쁘지 않음.
-> ****소켓에다가 했었는데, 소켓에 하지말고, 루트컴퍼넌트에 달린 메시 자체의 위치를 그만큼으로 옮겨주는것이 더 깔끔하다. 

(메모) 클릭키로 총이 나가게 하려면 클릭키->ACharacter::Action() 바인딩,
ACharacter::Action()에서 해당 총에게 PullTrigger 발생시키기 와 같은 방식으로 하면 유하게 표현 가능
모든 AGun은 PullTrigger()를 가지고, 각 총들마다 기능이 다르니까

2023 08 04
1. 이펙트를 소환하는 방법엔 SpawnEmitterAtLocation()도 있지만, SpawnEmitterAttached() 도있음, 이는 Component에 붙이는건데
예를들어 총에서 탄이 발사될 때, Spawn Emitter At Location() 을 쓰면 총이 움직여도 소환된 그 위치에서만 이펙트가 발생할텐데,
SpawnEmitterAttached()를 하면 컴퍼넌트에 부착돼서 총이 움직이면 그에 맞게 이펙트도 같이 움직일것,

(메모) UParticleSystem 변수에 가장 편하게 설정하는 방법은, UPROPERTY로 생성하고 그걸 블루프린트에서 바인딩 해주는 것
이름참조를 해서 하는 방법도 있다고 함 <- 이게 C++에서 하는것 but 이름 변경은 자주 일어날 수 있고 수정하기도 힘드므로,,

2. DrawDebugCamera를 통해 해당 위치,회전값 에서의 카메라를 시각적으로 확인할 수 있고,
GetActorEyesViewPoint() -> 액터의 눈을 통해서 보는것,
AController::GetPlayerViewPoint() -> AI는 자신들의 눈을 통해 보지만, PlayerController는 플레이어는 플레이어카메라를 통해 보므로 PlayerViewPoint를 필요로함 ,

FVector Location = GetActorLocation();
FRotator Rotator = GetActorRotation();
OwnerController->GetPlayerViewPoint(Location,Rotator);
DrawDebugCamera(GetWorld(), Location,Rotator, 90.0f, 2.0f, FColor::Red,true );
의 방식으로 플레이어컨트롤러상에서 현재 플레이어의 뷰포트 위치를 알아낼 수 있고, 그곳에서부터 레이트레이싱을 하면 됨
(-> 근데 이 방식에서 의문이 드는 점이, 게임엔진1에서 배웠던 내용에선, 그냥 카메라 컴퍼넌트의 위치를 기반으로 받아서 했었는데, 이거랑 다른게 대체 뭘까?)

3. LineTraceSingleByChannel
Project Settings>Engine>Collision>Trace Channels > New Trace Channel 을 통해 라인 트레이스 콜리쳔 채널을 추가할 수 있음.
초기엔 모든 타입에 대해서 Block 설정이 되므로, NoCollision 이라던가 OverlapAll 과 같은 콜리젼 프리셋들은 직접 값을 바꿔주기
전체적으론 VisibleTraceChannel 이랑 다를 것 없지만,
부쉬와 같은 곳에선 보이진않지만 총알은 지나가게 하는등의 차이가 있으므로

-> 우리가 만든 트레이스 채널이 무엇인지 Enum값을 확인하는 방법
프로젝트폴더>Config>DefaultEngine.ini 를 텍스트편집기로 열기
원하는 채널을 검색하면
(Channel=ECC_GameTraceChannel1,DefaultResponse=ECR_Block,bTraceType=True,bStaticObject=False,Name="Bullet")
와 같이 나오는데, 여기서 나온 ECC_GameTraceChannel1 이 우리가 사용할 이넘값인것.

DrawDebugPoint()를 통해 디버깅 가능

4.
FPointDamageEvent DamageEvent(Damage, HitResult, ShotDirection, nullptr);
UE5.1부터는 #include "Engine/DamageEvents.h"를 추가해야함. (https://stackoverflow.com/questions/75269262/fpointdamageevent-error-incomplete-type-is-not-allowed-unreal-engine-5-1)
if(HitResult.GetActor())
{
	HitResult.GetActor()->TakeDamage(Damage, DamageEvent, OwnerController, this);
}
로 충돌한 액터에게 대미지를 줄 수 잇음.

(메모) 이전에 대미지를 받는것을 이벤트에 바인딩 해서 하였다면,
가장 쉬운 방법은 Actor의 TakeDamage() 함수를 오버라이딩하여 사용하는것이다.

5. 블루프린트에서 C++의 함수/변수를 부르고 싶다면
BlueprintCallable/BlueprintPure 속성을 넣어주면 되는데
Pure의 경우 블루프린트 순수노드(퓨어노드) 와 같이 되는 그런것이 const 함수를 쓸 경우 그렇게 되는데,
const 함수에 더불어 내부 속성값 뿐만 아니라 상태나 그런것들이 바뀌지 않게 해준다는 것이라고 함.
그냥 뭔가 안바뀌면 const, pure 붙이면 될 것 같다.

6. AI Controller를 만들고 이를 적용할 때에는
Class Defaults >> Pawn >> AI Controller Class 에서 바꿔주면 된다.
해당 AI컨트롤러를 가진 액터를 월드에 배치하면 월드아웃라이너에 AIController_0 이 나타나고, 해당 액터는 소유한 액터의 Location에 있는거로 나타난다.

7. 언리얼 내에서 제공하는 AI 빌트인 기능이 있는데,
예를들어 SetPocus 라는 기능은 AI가 대상에 포커스 하게 하는 기능.
블루프린트상에서 봤던 MoveTo라던가 그런것들이 이에 해당하는 기능으로 보임,
자세한 것은 AIController.h 를 통해 확인이 가능하다.

8. AI Controller 에서
BeginPlay() 에서만 
void AShooterAIController::BeginPlay()
{
	Super::BeginPlay();

	APawn* PlayerPawn = UGameplayStatics::GetPlayerPawn(GetWorld(), 0);
	
	SetFocus(PlayerPawn);
}
와 같이 적어줬을 뿐인데, 게임을 진행하는 동안 계속 나의 캐릭터를 포커스하여 쳐다보았다.
SetFocus가 한번만 있었는데, 한번 포커스하면 자동으로 Tick() 에서 나를 쳐다보는 것으로 예상이 가는데, Tick()부분을 구현해놓지 않아 Super::Tick()에서 발생하는 것 같다.

9. Nav Mesh Bounds Volume
게임엔진1에서 혼자 배워보고 프로젝트에 적용해봤었는데,
그 당시엔 그냥 경로를 탐색할 수 있는 영역을 만드는 거구나 정도로만 이해했었으나,
알고보니 영역에 해당하는 부분에 걸을 수 있는 영역에 대한 메시를 만들고(장애물에 대해선 모두 컷이 되면서)
해당 메시의 영역 내에서 A-Star 알고리즘을 통해 이동 경로를 파악하는 방식이었다.
이미 구현된 것이라 따로 코드작성은 필요X

AI Controller 블루프린트 클래스를 살펴보면, 컴퍼넌트로 Path Following Component 라는 컴퍼넌트가 있는데, 
이 컴퍼넌트의 역할은 FMesh를 찾아서, 경로를 생성하게 해주고, 이동해줌
-> MoveTo() 라는 함수를 사용
원래는 MoveTo()만 있었는데, 언리얼 최신 버전에선 MoveToLocation / MoveToActor 도있는데,
순찰경로와 같은 그런것에선 MoveToLocation, 해당 액터를 포커스 하며 갈 땐 MoveToActor등을 활용할 수 있다는 듯 함.

예를들어 MoveToActor(대상 액터, 대상 액터와의 거리(기본값 -1), 

void AShooterAIController::Tick(float DeltaSeconds)
{
	APawn* PlayerPawn = UGameplayStatics::GetPlayerPawn(GetWorld(), 0);
	MoveToActor(PlayerPawn, 200);
}

다음과 같이 하면 액터가 200cm 의 거리를 두고 Tick() 마다 쫓아오게 되는데, 이상하게 Focus는 잘 먹지 않는다.
BeginPlay에서만 해서 그런건가 하고 사이에 넣어줘도 정상작동 하지 않는다.
-> 인줄 알았으나 알고보니 
	Super::Tick(DeltaSeconds);
이 빠져서 그랬던것이다, 이것으로 위에서 적었듯이 Tick()에서 포커스된 대상을 항상 쳐다보도록 구현된건가 에 대한 궁금증이 해결되었고,
Super의 기능을 실행시켜야 한다는 것을 깨달았다.


2023 08 05 
1. AI Controller의 시야를 확보하기 위한 AAIController::LineOfSight()
강의에서
// IF LineOfSight
	//MoveTo
	//SetFocus
// Else
	//ClearFocus
	//StopMovement
와 같이 의사코드를 작성하는 것을 보여줬는데, 매번 귀찮아서 그냥 머리에서 나오는대로 코딩했었는데, 이런 습관을 들이는게 진짜 정말로 좋아보인다.
그리고 의사코드로 된 상태에서 아직 안배운 함수들을 활용해 강의를 보지않고 코딩을 해봤는데,
LineOfSight -> https://docs.unrealengine.com/4.26/en-US/API/Runtime/Engine/GameFramework/AController/LineOfSightTo/
그리고 https://cpp.hotexamples.com/examples/-/-/LineOfSightTo/cpp-lineofsightto-function-examples.html
ClearFocus -> https://docs.unrealengine.com/4.27/en-US/API/Runtime/AIModule/AAIController/ClearFocus/
를 보면서 혼자 만들고 UE_LOG를 통해
if(LineOfSightTo(PlayerPawn))
{
	MoveToActor(PlayerPawn, 200);
	SetFocus(PlayerPawn);
	UE_LOG(LogTemp, Warning, TEXT("플레이어를 발견함! - 쫓아간다."));
}
else
{
	ClearFocus(EAIFocusPriority::Gameplay);
	StopMovement();
	UE_LOG(LogTemp, Display, TEXT("플레이어를 찾지 못함."));
}
로 작성완료하였다.
비록 쉬운 코드지만 나름대로 혼자 해내기도 하고 사실상 저기에서 트리구조로 짜고, 찾지 못했을 때에는 몇초간은 더 감시를 하는 태세를 만들면 실제 게임 AI로도 활용 가능하지 않을까 싶어진다. 

2. 행동트리 -> AIController가 사용/실행 할 수 있는 또다른 에셋
UPROPERTY(EditDefaultsOnly)
TObjectPtr<UBehaviorTree> AIBehaviorTree;
로 설정하고 바인딩 해 준 뒤,
AAIController::RunBehaviorTree(UBehaviorTree* BTAsset) 을 활용

AAIController::GetBlackboardComponent() 를 통해 블랙보드를 얻어올 수 있고,
UBlackboardComponent::SetKey()/SetBlackboard()/SetValueAsXXX() 등을 통해 값을 설정할 수 있는듯 함.
if(AIBehaviorTree)
{
	APawn* PlayerPawn = UGameplayStatics::GetPlayerPawn(GetWorld(), 0);
	RunBehaviorTree(AIBehaviorTree);
	GetBlackboardComponent()->SetValueAsVector(TEXT("Location"), PlayerPawn->GetActorLocation());
}
(메모) 만약 값을 지정하는게 아닌 지우기(초기화)만 할 경우 ClearValue(FName) 이 있음

3. BT에서 시퀀스/셀렉트 노드에 데코레이터를 추가할 수 있는데, TimeLimit으로 특정시간 동안만 시퀀스 안에 머물게 하거나,
Cone Check는 가시성, Conditional Loop는 특정에 맞게 루프, ... 등의 데코레이터가 있음
나중에 모든 기능을 살펴보자.
예를들어 Blackboard라는 데코레이터를 넣으면,
초기엔 SelfActor is Is Set 이 기본값으로 되어있는데,
이를 변경하여 특정 조건에 따라 아래가 실행될 지 안될지를 설정할 수 있음.

*데코레이터의 Details중에, Flow Control>>Observer aborts 에서 Self로 바꾸면, 조건이 실행중에 갑자기 거짓이 될 경우, 하던 작업을 멈추고 셀렉터를 재 평가하고 확인하게됨.
Lower Priority로 할 경우,  갑자기 블랙보드 조건이 참이 되면 하고 있던 다른 작업을 멈추고, 그 다음 (해당 속성으로 바꾸면 하이라이트 되는) 노드가 실행됨 
만약 Both로 할 경우, 조건이 참이 되면 해당 시퀀스를 실행하고, 거짓이 될 경우 바로 다음 시퀀스를 실행한다.

4. 
AI를 만듦.
현재의 시야 범위에 플레이어가 있을 경우, "PlayerLocation" 과 "LastKnownPlayerLocation" 값을 플레이어의 위치로 설정하고,
시야범위에 없을 경우, "PlayerLocation" 값을 초기화한다.
행동은 PlayerLocation이 설정되어 있을 경우 해당위치로, 안되어있다면 LastKnownPlayerLocation으로 이동한다.
이로써 플레이어가 보이는곳까지 계속 쫓아가다 플레이어가 꺾어 안보인다면 마지막으로 보인 위치까지 가고,
그곳에서 다시 플레이어를 보면 쫓아가고, 못 봤을 경우 그자리에서 가만히 있는 AI 가 만들어진것이다.
(메모) 셀렉터/시퀀스/데코레이터 모두 이름을 바꿀 수 있으므로 항상 설명하기 쉽고 다른사람이 이해하기 쉽게, 나중의 내가 이해하기도 쉽게 이름을 명확히 해놓자.

5.
4의 AI에서 마지막위치로 이동한 뒤 조사를 하고, 없을 경우 초기 위치로 돌아가도록 설정을 한다.
보통의 RPG에서의 AI를 살펴보면 (파판14를 예시로)
1. 몹은 초기위치에 스폰된다.
2-1 플레이어를 발견하지 못하면 (어글 대상 플레이어가 없다면),
      3-1. 주변을 서성인다.
2-2 플레이어를 발견한다면
      3-2-1 내가 스폰된 위치보다 멀리 있는가?
	 4-1. 복귀한다.(어글 초기화)
      3-2-2. 멀리있지 않다.
	 4-2-1. 플레이어가 공격범위 내에 있는가?
	         5-1. 공격한다.
	4-2-2. 공격범위 내에 없다면
	         5-2. 플레이어를 향해 쫓아간다.
와 같은 방식으로 되어있다. 내가 만드려는 AI는 1, 2-2, 5-2, 4-1 정도를 구현하는 느낌이다.
항상 AI에 대해 살펴보고 무슨 값을 필요로하는지, 어떤 절차를 가져야하는지, 어느만큼 딜레이가 있어야하는지 생각해보자.

6. 5의 방식을 추가하기 위해서, BTTask를 만들것(행동을 하는 노드라고 생각하는게 편함)
현재 BTTask의 행동은 LastKnownPlayerLocation 값을 초기화 하도록 하는 것이다.
해당 BTTask C++ class가 무슨 BTTask를 상속받아야할지를 파악해야하는데,
예를들어 MoveTo노드는 BlackboardBase로부터 상속받는다(BlackboardBase -> Blackboard의 키에 접근해서 활용할 수 있음)

근데, BTTask를 만들면, LNK관련 오류로 빌드에 실패하는데, 
LNK2001 기준 헤더파일에 C++에는 없는 뭔가가 있다는 것. 혹은 우리가 의존하는 모듈이 포함되지 않았다는 것,
오류 목록을 보면 unresolved external symbol "Public: virtual void __cdecl IGameplayTaskOwnerInterface::OnGameplayTaskActivated(~~~) ~~~ 라고 나와있는데,
이것이 모듈을 나타냄,
예전에 EnhancedInput 모듈이 없어서 냈던 오류같은 느낌인것같다.
이곳에 GameplayTasks를 추가하면 됨.

이후 해당 BTTask의 생성자를 만들고,
NodeName = TEXT("~~~")를 설정해주면 기본적인 준비는 끝.

7. C++ BTTask 에 대해서 오버라이딩할 함수들의 목록으로는
ExecuteTask() -> BeginPlay() 같이 처음 실행되기 시작할 때,
AbortTask() -> 실행을 중단해야한다고 판단할때, 예를들어 조건이 거짓이 되었기 떄문 등
TickTask() -> 태스크가 실행할 때마다 but 첫 틱에는 ExecuteTask()가 실행됨
OnMessage() -> 메시지를 보내거나 등등. 아직은 별로 신경 안써도 됨

virtual EBTNodeResult::Type ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory);
(메모)노드메모리는 조금 더 상위의 단계에서 사용되는데 알아둬야 할 것 같음. 나중에 찾아보기

BTTask의 선택된 키에 접근하려면, BlackboardBase.h의 GetSelectedBlackboardKey() 를 활용하면 FName을 받을 수 있음.

BTTask의 반환값으로는
namespace EBTNodeResult
{
	// keep in sync with DescribeNodeResult()
	enum Type : int
	{
		// finished as success
		Succeeded,
		// finished as failure
		Failed,
		// finished aborting = failure
		Aborted,
		// not finished yet
		InProgress,
	};
}
성공, 실패, 중단(거의 실패와 유사), 진행중(오래 실행되면서 틱을 여러차례 실행하는 태스크의 경우 사용)

8.
(메모)Blackboard Task MoveTo에 Details의 Node 옵션중 Acceptable Radius를 통해 도착할 거리를 측정할 수 있고,
Observe Blackboard Value를 체크하지 않으면, 목표하는 MoveTo위치까지 가야지 다시 업데이트를 받는데,
체크를 하면 플레이어가 위치를 바꿀 때 마다 계속해서 업데이트 됨.

9. 
UBehaviorTreeComponent의 부모는 UBrainComponent가 있고,
UBrainComponent의 변수엔 AAIController* AIOwner 가 protected로 있으며,
AAIController* GetAIOwner() const { return AIOwner; } 가 있음

여기에서 문제점) UE4와 다르게 UE5의 입력시스템은 인풋시스템에 바인딩되는 함수의 인자가 void 가 아니라 FInputValue&를 받는데,
이로인해 외부에서 어떻게 사용하지 하고 고민을 하다가
void Shoot(const FInputActionValue& Value = NULL);
의 방식으로 일단 빌드는 돌아가는 것을 확인.
실행이 되는지는 확인을 해 봐야 할 것 같다.

Cast<AShooterCharacter>(OwnerComp.GetAIOwner()->GetPawn())->Shoot();
Shoot()을 호출하는 방식은 이런식으로 하였다.

여기서 사실 나는 그대로 바로 Shoot을 호출하였지만,
Cast 결과를 AShooterCharacter*로 받고,
해당 받은 변수가 유효한지(nullptr이 아닌지) 체크하고 해주는것이 좋음.

10. 여태까지는 Blackboard의 Key 값을 Set할 때, AIController의 Tick() 에서 했었는데, 이를 BT에서 하려면 "Service"를 활용하면 됨.
예를들어서 Tick()에서 매번 벌어지지 않고 특정 노드에서만 되게 하려할때에도 Service를 쓰는데,
나를 향해 쫓아올 때, 몹이 나를 쳐다보지 않는 현상이 발생하는데, 이 때 Service에서 Default Focus 를 추가하고 해당 벡터를 PlayerLocation으로 해주면 나를 쳐다본다.
(메모) LastKnownPlayerLocation의 경우 Investigation 에서 말고는 쓰지 않으므로 다른곳에서 업데이트를 굳이 할 필요는 없다 -> Service를 통해 표현한다 가 되는것 같다.

Service에서 주로 사용할 수 있는 메소드는
OnBecomeRelevant
OnCeaseRevelant
TickNode <- 서비스가 활성화 된 경로에 있으면 항상 업데이트 할 것.
OnSearchStart

virtual void TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds) override;


2023 08 06
1. 이전까지 총을 쏘는 방식은, 플레이어의 뷰 포트를 받아와서 중앙으로부터 LineTrace를 해서 만나는 지점에 총을 쏘는 방식이었는데,
플레이어의 경우 뷰포트가 자신의 캐릭터와 떨어져있어서 상관이 없었지만,
AICharacter의 경우 GetPlayerViewPoint를 할 경우 카메라같은 것이 아니라, AI 캐릭터 자체의 눈이고,
눈에서 총알이 나오면 바로 자신의 충돌 캡슐과 부딪혀 대미지를 입고 자폭하는것이다.

이를 위해서,
FCollisionQueryParams Params;와 같이 변수를 만들고,
Params.AddIgnoredActor(this); //AGun
Params.AddIgnoredActor(GetOwner()); //소유한 캐릭터
와 같이 무시되는 액터를 추가한 뒤,
LineTraceSingleByChannel 의 마지막 인자로 추가해주면, 해당 무시되는 액터들은 무시되고 LineTrace기능을 수행함.


2. 그래도 플레이어와 적 모두 죽은 뒤에도 계속해서 총을 쏘게 되는데,
대미지를 받는 함수인 TakeDamage 부분에
if(IsDead())
{
	DetachFromControllerPendingDestroy();
	GetCapsuleComponent()->SetCollisionEnabled(ECollisionEnabled::NoCollision);
}
를 추가하여 죽자마자 자신의 컨트롤러를 떼버리고, 충돌체인 캡슐컴퍼넌트를 노콜리젼으로 바꿔버린다.
 
하지만 이렇게만 하면 적군을 죽였을 때, 적군의 AIController가 끊어져 죽는거에 대한 처리는 되고 총을 더이상 쏘지 않지만,
플레이어가 죽을 경우엔 적의 AIController는 남아있어서 계속 총을 쏘고 있는다.

3. 게임이 종료되는 로직을 구현하기 위해
ShooterCharacter가 죽을 경우 컨트롤러를 떼면서, GameMode의 PawnKilled()를 호출
TObjectPtr<ASimpleShooterGameMode> GameMode = GetWorld()->GetAuthGameMode<ASimpleShooterGameMode>();
if (GameMode)
{
	GameMode->PawnKilled(this);
}
월드의 GetAuthGameMode<>()를 통하여 게임모드를 받아올 수 있음.


